package com.example.diceroller

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import org.w3c.dom.Text
import kotlin.random.Random

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)  // R is the resource class, which is automatically generated from
                                                // your resource folder, and contains references to all your resources

        // create a value of type Button (same as the resource widget) that connects to the widget
        // via the autogenerated resource class (R) and the button ID
        val rollButton: Button = findViewById(R.id.roll_button)

        // set on click listener accepts a single argument, a lambda, that is executed every time
        // the button is clicked
        // for this example just use a toast, which is a temporary pop up message
//        rollButton.setOnClickListener {
//            Toast.makeText(this, "button clicked!", Toast.LENGTH_SHORT).show()
//        }

        // we probably want to do something a little more complex, so we will actually call
        // a function using our lambda
        rollButton.setOnClickListener {
            rollDice()
        }

    }

    private fun rollDice() {
        val diceRollResult = Random.nextInt(6) + 1

        // used when we previously had a text view instead of the image
        // val resultText: TextView = findViewById(R.id.result_text)
        // resultText.text = diceRollResult.toString()

        // random number between 1 and 6
        val drawableResource = when(diceRollResult) {
            1 -> R.drawable.dice_1
            2 -> R.drawable.dice_2
            3 -> R.drawable.dice_3
            4 -> R.drawable.dice_4
            5 -> R.drawable.dice_5
            6 -> R.drawable.dice_6
            else -> R.drawable.empty_dice
        }

        val diceImage: ImageView = findViewById(R.id.dice_image)
        diceImage.setImageResource(drawableResource)
    }
}
